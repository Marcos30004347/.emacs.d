#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Packages
** Setup
#+begin_src emacs-lisp
  (require 'package)
  ;; Disable automatic package startup
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/"))

  ;; Initialize packages
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)

    (setq evil-cross-lines t)

    :config
    (evil-mode 1)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
				("<tab>" . company-complete-selection))
			(:map lsp-mode-map
				("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq company-tooltip-align-annotations t))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src

** restclient
#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.http\\'" . restclient-mode))

(use-package company-restclient
  :ensure t
  :after (company)
  :config
  (add-to-list 'company-backends 'company-restclient))

#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper))
    ;;				 :map ivy-minibuffer-map
    ;;				 ("TAB" . ivy-alt-done)
    ;;				 ("C-l" . ivy-alt-done)
    ;;				 ("C-j" . ivy-next-line)
    ;;				 ("C-k" . ivy-previous-line)
    ;;				 :map ivy-switch-buffer-map
    ;;				 ("C-k" . ivy-previous-line)
    ;;				 ("C-l" . ivy-done)
    ;;				 ("C-d" . ivy-switch-buffer-kill)
    ;;				 :map ivy-reverse-i-search-map
    ;;				 ("C-k" . ivy-previous-line)
    ;;				 ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package counsel-projectile
    :ensure t
    :after projectile
    :config
    (counsel-projectile-mode 1))
#+end_src


** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("s-p" . projectile-command-map)
		("C-c p" . projectile-command-map)))

  ;; (setq projectile-project-search-path '("~", "~/workspace/"))
#+end_src

** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

** Move Text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t)
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :init
    (setq helm-split-window-in-side-p t
	  helm-move-to-line-cycle-in-source t)
    :config 
    (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
    (global-set-key (kbd "M-b") 'helm-buffers-list) ;; List buffers ( Emacs way )
    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
    ;;(global-set-key (kbd "C-x C-f") 'helm-projectile-find-file) ;; Finding files with Helm
    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
    :ensure t)
  (use-package helm-projectile
    :ensure t)
  (use-package helm-gitignore
    :ensure t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp

  ;; (use-package yasnippet
  ;; 	:ensure t)

  ;; (use-package auto-yasnippet
  ;; 	:ensure t)

  ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  ;; (yas-global-mode 1)
#+end_src

** Ag
For  Ag to work, it is neccessary to install "The Silver Searcher" on you system, follow https://github.com/ggreer/the_silver_searcher#installation for instructions.
#+begin_src emacs-lisp
  (use-package ag
    :ensure t)

  (setq ag-highlight-search t)
  (setq ag-reuse-window t)

  (use-package wgrep
    :ensure t)
  (use-package wgrep-ag
    :ensure t)
#+end_src

#+RESULTS:

** GenDoxy
#+begin_src emacs-lisp
  (load  (expand-file-name "gendoxy.el" user-emacs-directory))
#+end_src

** Fixmee
#+begin_src emacs-lisp
  ;; (use-package fixmee
  ;; 	:ensure t)
  ;; (use-package button-lock
  ;; 	:ensure t)

  ;; (global-fixmee-mode 1)

#+end_src

** Highlight-Indent-Guides
#+begin_src emacs-lisp
  ;; (use-package highlight-indent-guides
  ;; 	:ensure t)

  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  ;; (setq highlight-indent-guides-method 'bitmap)

#+end_src


* Configuration
** Temp files
#+begin_src emacs-lisp

  (setq auto-save-file-name-transforms
	`((".*" ,(concat user-emacs-directory "auto-save") t)))
  (setq backup-directory-alist
	`(("." . ,(expand-file-name
		   (concat user-emacs-directory "backups")))))
  (setq create-lockfiles nil)

#+end_src

** Path
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH"))
#+end_src

** Paren mode
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** Right option key on macOS
#+begin_src emacs-lisp
  (setq ns-alternate-modifier 'meta)
  (setq ns-right-alternate-modifier 'none)

  ;; Delete selected text on insert
  (delete-selection-mode 1)

#+end_src

** Tab width
#+begin_src emacs-lisp

  (setq tab-always-indent 'complete
	indent-tabs-mode nil)
  (setq-default indent-tabs-mode t)

  (setq-default tab-width 2)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
#+end_src
** Visual line mode
#+begin_src emacs-lisp
  (global-visual-line-mode t)

  (setq-default word-wrap t)
#+end_src
** MacOS
#+begin_src emacs-lisp
  (setq mac-pass-command-to-system nil)
  (setq ns-alternate-modifier 'none)
  (setq ns-right-alternate-modifier 'none)
					  ;(add-to-list 'default-frame-alist '(fullscreen . fullboth))
					  ;(setq ns-use-native-fullscreen nil)
  (setq mac-command-modifier 'meta)
#+end_src

#+RESULTS:
: meta

* Appearence
** UI elements:
#+begin_src emacs-lisp
  ;; Remove Welcome message
  (setq inhibit-startup-message t)

  ;; ;; Hilight on current line
  ;; (global-hl-line-mode t)
  (global-prettify-symbols-mode +1)
  (blink-cursor-mode 0)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (global-display-line-numbers-mode 1)
  ;; (set-frame-parameter nil 'fullscreen 'fullboth)

  ;; (global-display-line-numbers-mode 1)

  (setq visible-bell nil)
#+end_src

** Sublimity
#+begin_src emacs-lisp
  ;; (use-package sublimity 
  ;; 	:ensure t)

  ;; (require 'sublimity)
  ;; ;; (require 'sublimity-map)
  ;; (require 'sublimity-scroll)
  ;; (require 'sublimity-attractive)
  ;; (sublimity-mode 1)
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; Setup doom-themes
  (use-package gruvbox-theme :ensure t)
  (use-package ample-theme :ensure t)
  (use-package zenburn-theme :ensure t)
  (use-package solarized-theme :ensure t)
  (use-package minimal-theme :ensure t)
  (use-package tao-theme :ensure t)

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold nil
	  doom-themes-enable-italic nil)

					  ;(load-theme 'doom-one t)

    (doom-themes-visual-bell-config)
    ;; (doom-themes-neotree-config)
    ;; (setq doom-themes-treemacs-theme "doom-one")
    (setq doom-themes-treemacs-theme "gruvbox-dark-medium")
    ;; (doom-themes-treemacs-config)
    (doom-themes-org-config))

  ;; (use-package almost-mono-themes
  ;; :ensure t)

  ;;(load-theme 'gruvbox t)
  ;;(load-theme 'minimal-light t)
  ;;(load-theme 'tao-yang t)
  ;;(load-theme 'naysayer t)
  ;; (set-face-attribute 'fringe nil :background (face-background 'default))
	(use-package gruber-darker-theme :ensure t)
	(load-theme 'gruber-darker t)
  ;; (load-theme 'doom-verde t)
  ;; (load-theme 'zenburn t)
  ;; (load-theme 'gruber-darker t)

  ;;ยบ (use-package gruvbox-theme
  ;; 	:ensure t)
  ;; 	(use-package spacemacs-theme
  ;; 	:defer t
  ;; 	:init (load-theme 'spacemacs-dark t))
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

  (use-package all-the-icons
    :ensure t)

  ;; (use-package all-the-icons-dired
  ;; 	:ensure t
  ;; 	:if (display-graphic-p)
  ;; 	:hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka" :height 200)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 200)

  (load "~/.emacs.d/iosevka-lig")

  (set-face-attribute 'mode-line nil :font "Fira Code" :height 120)

  ;; (set-face-attribute 'mode-line-inactive nil :height 100)
#+end_src
** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode 0)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

  (use-package treemacs-nerd-icons
    :ensure t
    :config
    (treemacs-load-theme "nerd-icons"))
  (setq nerd-icons-font-family "Symbols Nerd Fonts Mono")
  (treemacs-follow-mode 0)
#+end_src

#+RESULTS:

** Dashboard
#+begin_src emacs-lisp
  ;; (use-package dashboard
  ;; 	:ensure t
  ;; 	:config
  ;; 	(setq dashboard-set-heading-icons t)
  ;; 	(setq dashboard-set-file-icons t)
  ;; 	(setq dashboard-set-navigator t)
  ;; 	(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  ;; 	(setq dashboard-startup-banner "~/.emacs.d/dashboard-logos/acdc.txt")
  ;; 	(setq dashboard-center-content t)
  ;; 	(setq dashboard-show-shortcuts t)
  ;; 	(setq dashboard-items '((recents  . 5)
  ;; 													(bookmarks . 5)
  ;; 													(projects . 5)
  ;; 													(agenda . 5)
  ;; 													(registers . 5)))	
  ;; 	(dashboard-setup-startup-hook))
#+end_src

** Special Words Highlights
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
	  hl-todo-keyword-faces
	  `(("TODO"       warning bold)
	    ("FIXME"      error bold)
	    ("HACK"       font-lock-constant-face bold)
	    ("REVIEW"     font-lock-keyword-face bold)
	    ("NOTE"       success bold)
	    ("DEPRECATED" font-lock-doc-face bold))))

  (hl-todo-mode)

  (add-hook 'text-mode-hook 'hl-todo-mode)
#+end_src

#+RESULTS:
: t

* Latex
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-auto-save t))
  ;; (setq exec-path (append exec-path '("/opt/local/bin")))



  (with-eval-after-load 'org
    (add-to-list 'org-latex-default-packages-alist '("T1"       "fontenc"    t))
    (add-to-list 'org-latex-default-packages-alist '("usenames" "color"      t))
    (add-to-list 'org-latex-default-packages-alist '(""         "amsmath"    t))
    (add-to-list 'org-latex-default-packages-alist '("mathscr"  "eucal"      t))
    (add-to-list 'org-latex-default-packages-alist '("utf8"     "inputenc"   t))
    (add-to-list 'org-latex-default-packages-alist '(""         "graphicx"   t))
    (add-to-list 'org-latex-default-packages-alist '("normalem" "ulem"       t))
    (add-to-list 'org-latex-default-packages-alist '(""         "textcomp"   t))
    (add-to-list 'org-latex-default-packages-alist '(""         "marvosym"   t))
    (add-to-list 'org-latex-default-packages-alist '(""         "latexsym"   t))
    (add-to-list 'org-latex-default-packages-alist '(""         "amssymb"    t)))
#+end_src
* Org Mode
** Org Mode setup handler

#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (linum-mode 0)
    (org-indent-mode t)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    )
#+end_src

** Org Mode Font

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot

    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "โข"))))))

    ;; Set faces for heading levels
    (dolist (face '(
		    (org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    )


#+end_src

** Org Package
#+begin_src emacs-lisp
  (load "~/.emacs.d/magic-mode")
  (load "~/.emacs.d/cplusplus-mode")
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    ;; (setq org-ellipsis " โพ")
    (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
    (setq org-preview-latex-process-alist
	  '(
	    (dvipng :programs
		    ("latex" "dvipng")
		    :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
		    (1.0 . 1.0)
		    :latex-compiler
		    ("latex -interaction nonstopmode -output-directory %o %f")
		    :image-converter
		    ("dvipng -D %D -T tight -o %O %f"))
	    (dvisvgm :programs
		     ("latex" "dvisvgm")
		     :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
		     (1.7 . 1.5)
		     :latex-compiler
		     ("latex -interaction nonstopmode -output-directory %o %f")
		     :image-converter
		     ("dvisvgm %f -n -b min -c %S -o %O"))

	    )
	  )

    (setq org-cycle-emulate-tab 'white)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-src-preserve-indentation t)
    (setq org-src-tab-acts-natively t)
    (setq org-agenda-files
	  '("~/workspace/orgfiles/tasks.org"))
    ;; (setq org-adapt-indentation nil)
    (setq org-hide-leading-stars t)
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
	  '(("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
	  '((:startgroup)
					  ; Put mutually exclusive tags here
	    (:endgroup)
	    ("@errand" . ?E)
	    ("@home" . ?H)
	    ("@work" . ?W)
	    ("agenda" . ?a)
	    ("planning" . ?p)
	    ("publish" . ?P)
	    ("batch" . ?b)
	    ("note" . ?n)
	    ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-deadline-warning-days 7)))
	      (todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))
	      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	    ("n" "Next Tasks"
	     ((todo "NEXT"
		    ((org-agenda-overriding-header "Next Tasks")))))

	    ("W" "Work Tasks" tags-todo "+work-email")

	    ;; Low-effort next actions
	    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	     ((org-agenda-overriding-header "Low Effort Tasks")
	      (org-agenda-max-todos 20)
	      (org-agenda-files org-agenda-files)))

	    ("w" "Workflow Status"
	     ((todo "WAIT"
		    ((org-agenda-overriding-header "Waiting on External")
		     (org-agenda-files org-agenda-files)))
	      (todo "REVIEW"
		    ((org-agenda-overriding-header "In Review")
		     (org-agenda-files org-agenda-files)))
	      (todo "PLAN"
		    ((org-agenda-overriding-header "In Planning")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "BACKLOG"
		    ((org-agenda-overriding-header "Project Backlog")
		     (org-agenda-todo-list-sublevels nil)
		     (org-agenda-files org-agenda-files)))
	      (todo "READY"
		    ((org-agenda-overriding-header "Ready for Work")
		     (org-agenda-files org-agenda-files)))
	      (todo "ACTIVE"
		    ((org-agenda-overriding-header "Active Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "COMPLETED"
		    ((org-agenda-overriding-header "Completed Projects")
		     (org-agenda-files org-agenda-files)))
	      (todo "CANC"
		    ((org-agenda-overriding-header "Cancelled Projects")
		     (org-agenda-files org-agenda-files)))))))

    (efs/org-font-setup))


  (use-package calfw
    :ensure t)

  (use-package calfw-org
    :ensure t)

  ;; (use-package org-timeline 
  ;; 	:ensure t)
  ;; (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)

  ;; (defun my/use-text-mode-org-comments (args)
  ;;   "Use text-mode for editing comments"
  ;;   (unless (nth 2 args)
  ;;     (setf (nth 2 args) 'text-mode))
  ;;   args)
  (require 'org-mouse)
  ;; (advice-add 'org-src--edit-element 
  ;;             :filter-args #'my/use-text-mode-org-comments)

  (add-hook 'org-mode-hook
	    (lambda ()
	      (linum-mode 0)
	      (org-indent-mode t))
	    t)
#+end_src

** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("โ" "โ" "โ" "โ" "โ" "โ" "โ")))
#+end_src

** Org Visual Fill Column

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . efs/org-mode-visual-fill))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (add-hook 'text-mode-hook #'efs/org-mode-visual-fill)
#+end_src

** Org Configure Babel Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (latex . t)))
#+end_src

** Org Auto-tangle Configuration files
#+begin_src emacs-lisp
  ;; Automatically tangle our emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Ord desactive linum-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (linum-mode 0)))
#+end_src
* Development
** Language server
#+begin_src emacs-lisp
  ;;(setq lsp-log-io nil) 
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-code-actions t)

  (use-package lsp-mode
    :ensure t
    :hook (
	   (lsp-mode . lsp-deferred)
    :config
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-enable-links nil)
    :commands lsp lsp-deferred))

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy
    :ensure t)


  (setq lsp-language-id-configuration '((java-mode . "java")
					(python-mode . "python")
					(gfm-view-mode . "markdown")
					(rust-mode . "rust")
					(css-mode . "css")
					(xml-mode . "xml")
					(c-mode . "c")
					(c++-mode . "cpp")
					(objc-mode . "objective-c")
					(web-mode . "html")
					(html-mode . "html")
					(sgml-mode . "html")
					(mhtml-mode . "html")
					(go-mode . "go")
					(haskell-mode . "haskell")
					(php-mode . "php")
					(json-mode . "json")
					(web-mode . "javascript")
					;;(typescript-mode . "typescript")
					))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+end_src

** C/C++
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'lsp-deferred)
  (add-hook 'c-mode-hook 'lsp-deferred)
  (add-hook 'cuda-mode-hook 'lsp-deferred)
  (add-hook 'objc-mode-hook 'lsp-deferred)

  (use-package clang-format+
    :ensure t)

					  ;(add-hook 'c-mode-common-hook #'clang-format+-mode)

  (defun clang-format-save-hook-for-this-buffer ()
    "Create a buffer local save hook."
    (add-hook 'before-save-hook
	      (lambda ()
		(when (locate-dominating-file "." ".clang-format")
		  (clang-format-buffer))
		;; Continue to save.
		nil)
	      nil
	      ;; Buffer local hook.
	      t))

  ;; Run this for each mode you want to use the hook.
					  ;(add-hook 'c-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
					  ;(add-hook 'c++-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
					  ;(add-hook 'glsl-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))

#+end_src



** CMake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'")
    :hook (cmake-mode . lsp-deferred))
#+end_src

** Go Mode

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook ((before-save . gofmt-before-save)
	   (go-mode . (lambda ()
			(set (make-local-variable 'company-backends) '(company-go))
			(company-mode)
			(go-eldoc-setup))))
    :config
    ;; Set gofmt command to use goimports
    (setq gofmt-command "goimports")
    ;; Key bindings specific to go-mode
    (define-key go-mode-map (kbd "C-c C-r") 'go-remove-unused-imports)
    (define-key go-mode-map (kbd "C-c C-g") 'go-goto-imports)
    (define-key go-mode-map (kbd "C-c C-k") 'godoc))

;; Company-go setup
  (use-package company-go
    :ensure t)

  ;; Go-eldoc setup
  (use-package go-eldoc
    :ensure t)
#+end_src

*** Typescript, Javascript, JSX, Node

Install dependencies with:

npm install -g eslint babel-eslint eslint-plugin-react

sudo npm i -g typescript-language-server; sudo npm i -g typescript

sudo npm i -g javascript-typescript-langserver
		
#+begin_src emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.jsx\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))

  (use-package web-mode
    :ensure t
    :mode ("\\.html?\\'"
	   "/themes/.*\\.php?\\'"
	   "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'"
	   "\\.\\(handlebars\\|hbs\\)\\'")
    :config (progn
	      (setq
	       web-mode-markup-indent-offset 2
	       web-mode-css-indent-offset 2
	       web-mode-code-indent-offset 2
	       web-mode-enable-auto-closing t
	       web-mode-enable-auto-opening t
	       web-mode-enable-auto-pairing t
	       web-mode-enable-auto-indentation t
	       web-mode-enable-auto-quoting t
	       web-mode-enable-current-column-highlight t
	       web-mode-enable-current-element-highlight t
	       web-mode-content-types-alist
	       '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'")))))

  ;;(use-package js2-mode :ensure t
  ;;	:mode
  ;;	(("\\.js\\'" . js2-mode))
  ;;	:custom
  ;;	(js2-include-node-externs t)
  ;;	(js2-global-externs '("customElements"))
  ;;	(js2-highlight-level 3)
  ;;	(js2r-prefer-let-over-var t)
  ;;	(js2r-prefered-quote-type 2)
  ;;	(js-indent-align-list-continuation t)
  ;;	(global-auto-highlight-symbol-mode t)
  ;;	:config
  ;;	(setq js-indent-level 2)
  ;;	(advice-add #'js2-identifier-start-p
  ;;							:after-until
  ;;							(lambda (c) (eq c ?#))))


  (add-hook 'typescript-mode-hook 'lsp-deferred)
  (add-hook 'json-mode-hook 'lsp-deferred)
  (add-hook 'web-mode-hook 'lsp-deferred)
  (add-hook 'css-mode 'lsp-deferred)

#+end_src

** Bash

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sh\\'" . sh-mode))
  (add-hook 'sh-mode-hook 'lsp-deferred)
#+end_src
** Magic
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.magic\\'" . magic-mode))
  (add-to-list 'auto-mode-alist '("\\.lang\\'" . magic-mode))
#+end_src

** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode 
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
  (add-hook 'yaml-mode-hook 'lsp-deferred)
#+end_src

** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
  (add-hook 'json-mode-hook 'lsp-deferred)
#+end_src

* Keybindings
#+begin_src emacs-lisp
  (defun my-org-todo-toggle ()
    (interactive)
    (let ((state (org-get-todo-state))
	  post-command-hook)
      (if (string= state "TODO")
	  (org-todo "DONE")
	(org-todo "TODO"))
      (run-hooks 'post-command-hook)
      (org-flag-subtree t)))

  (global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "M-<tab>") 'other-window)
  (global-set-key (kbd "C-c a") 'cfw:open-org-calendar)

  (evil-ex-define-cmd "c[alendar]" 'cfw:open-org-calendar)
  (evil-ex-define-cmd "a[genda]" 'org-agenda)
  (evil-ex-define-cmd "schedule" 'org-schedule)
  (evil-ex-define-cmd "todo" 'org-todo)
  (evil-ex-define-cmd "done" 'my-org-todo-toggle)

  (define-key evil-normal-state-map (kbd "C-t") 'treemacs)

  (define-key evil-motion-state-map " " nil)

  (define-key evil-normal-state-map (kbd "C-s") 'swiper)
  (define-key evil-normal-state-map (kbd "C-r") 'replace-regexp)
  (define-key evil-normal-state-map (kbd "C-S-R") 'ag-project-regexp)

  ;; Double spaces for finding files
  (define-key evil-normal-state-map (kbd "SPC SPC") 'helm-projectile-find-file)

  (define-key evil-motion-state-map (kbd "SPC h") 'evil-window-left)
  (define-key evil-motion-state-map (kbd "SPC j") 'evil-window-down)
  (define-key evil-motion-state-map (kbd "SPC k") 'evil-window-up)
  (define-key evil-motion-state-map (kbd "SPC l") 'evil-window-right)

  (define-key evil-normal-state-map (kbd "SPC j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "SPC h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "SPC k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "SPC l") 'evil-window-right)

  ;; Quick buffer switching
  (define-key evil-normal-state-map (kbd "M-l") 'next-buffer)
  (define-key evil-normal-state-map (kbd "M-h") 'previous-buffer)

  (define-key evil-visual-state-map (kbd "C-c c") 'uncomment-region)
  (define-key evil-visual-state-map (kbd "C-c u") 'comment-region)

  ;; Move lines with M-j, M-k in normal and insert mode
  (define-key evil-normal-state-map (kbd "M-k") 'move-text-up)
  (define-key evil-normal-state-map (kbd "M-j") 'move-text-down)
  (define-key evil-insert-state-map (kbd "M-k") 'move-text-up)
  (define-key evil-insert-state-map (kbd "M-j") 'move-text-down)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (define-key evil-insert-state-map (kbd "M-b") 'helm-buffers-list)
  (define-key evil-normal-state-map (kbd "M-b") 'helm-buffers-list)
#+end_src
