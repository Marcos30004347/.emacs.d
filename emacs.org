+title Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Packages
** 0. Setup
	 #+begin_src emacs-lisp
		 (require 'package)

		 ;; Disable automatic package startup
		 (setq package-enable-at-startup nil)
		 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
		 (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
		 (add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/"))

		 ;; Initialize packages
		 (package-initialize)

		 ;; Instale use-package
		 (unless (package-installed-p 'use-package)
			 (package-refresh-contents)
			 (package-install 'use-package))
	 #+end_src

** 1. Evil
	 #+begin_src emacs-lisp
		 (use-package evil
			 :ensure t
			 :init
			 (setq evil-want-integration t)
			 (setq evil-want-C-u-scroll t)

			 (setq evil-cross-lines t)

			 :config
			 (evil-mode 1)

			 (evil-global-set-key 'motion "j" 'evil-next-visual-line)
			 (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
	 #+end_src

** 2. Auto Complete
	 #+begin_src emacs-lisp
		 ;;(use-package auto-complete
		 ;;	:ensure t
		 ;;	:init
		 ;;	(progn
		 ;;		(ac-config-default)
		 ;;		(global-auto-complete-mode t)))
	 #+end_src

** 3. Company
	 #+begin_src emacs-lisp
		 (use-package company
			 :ensure t
			 :after lsp-mode
			 :hook (lsp-mode . company-mode)
			 :bind (:map company-active-map
									 ("<tab>" . company-complete-selection))
			 (:map lsp-mode-map
						 ("<tab>" . company-indent-or-complete-common))
			 :custom
			 (company-minimum-prefix-length 1)
			 (company-idle-delay 0.0))
		 (use-package company-box
			 :ensure t
			 :hook (company-mode . company-box-mode))
	 #+end_src

** 4. Ivy
	 #+begin_src emacs-lisp
		 (use-package ivy
			 :ensure t
			 :diminish
			 :bind (("C-s" . swiper)
							:map ivy-minibuffer-map
							("TAB" . ivy-alt-done)
							("C-l" . ivy-alt-done)
							("C-j" . ivy-next-line)
							("C-k" . ivy-previous-line)
							:map ivy-switch-buffer-map
							("C-k" . ivy-previous-line)
							("C-l" . ivy-done)
							("C-d" . ivy-switch-buffer-kill)
							:map ivy-reverse-i-search-map
							("C-k" . ivy-previous-line)
							("C-d" . ivy-reverse-i-search-kill))
			 :config
			 (ivy-mode 1))
	 #+end_src

** 5. Counsel
	 #+begin_src emacs-lisp
		 (use-package counsel
			 :ensure t
			 :bind (("C-M-j" . 'counsel-switch-buffer)
							:map minibuffer-local-map
							("C-r" . 'counsel-minibuffer-history))
			 :custom
			 (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
			 :config
			 (counsel-mode 1))

		 (use-package counsel-projectile
			 :ensure t
			 :after projectile
			 :config
			 (counsel-projectile-mode 1))
	 #+end_src

** 6. Projectile
	 #+begin_src emacs-lisp
		 (use-package projectile
			 :diminish projectile-mode
			 :config (projectile-mode)
			 :bind-keymap
			 ("C-c p" . projectile-command-map)
			 :init
			 (when (file-directory-p "~/workspace")
				 (setq projectile-project-search-path '("~/workspace")))
			 (setq projectile-switch-project-action #'projectile-dired))
	 #+end_src

** 7. EditorConfig
	 #+begin_src emacs-lisp
		 (use-package editorconfig
			 :ensure t
			 :config
			 (editorconfig-mode 1))
	 #+end_src

** 8. Move Text
	 #+begin_src emacs-lisp
		 (use-package move-text
			 :ensure t)
	 #+end_src

** 9. Helm
	 #+begin_src emacs-lisp
		 (use-package helm
			 :ensure t
			 :preface (require 'helm-config)
			 :init
			 (setq helm-split-window-in-side-p t
						 helm-move-to-line-cycle-in-source t)
			 :config 
			 (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
			 (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
			 (global-set-key (kbd "M-b") 'helm-buffers-list) ;; List buffers ( Emacs way )
			 (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
			 (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
																						 ;(global-set-key (kbd "C-x C-f") 'helm-find-file) ;; Finding files with Helm
			 (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
			 (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
			 (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
			 (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
			 (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
			 :ensure t)
		 (use-package helm-projectile
			 :ensure t)
	 #+end_src
** Yasnippet
	 #+begin_src emacs-lisp

		 (use-package yasnippet
			 :ensure t)

		 (use-package auto-yasnippet
			 :ensure t)

		 (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
		 (yas-global-mode 1)
	 #+end_src

** Ag
	 For  Ag to work, it is neccessary to install "The Silver Searcher" on you system, follow https://github.com/ggreer/the_silver_searcher#installation for instructions.
	 #+begin_src emacs-lisp
		 (use-package ag
			 :ensure t)

		 (setq ag-highlight-search t)
		 (setq ag-reuse-window t)

		 (use-package wgrep
			 :ensure t)
		 (use-package wgrep-ag
			 :ensure t)
	 #+end_src

	 #+RESULTS:

** GenDoxy
#+begin_src emacs-lisp
(load  (expand-file-name "gendoxy.el" user-emacs-directory))
#+end_src
** Good-Scroll
#+begin_src emacs-lisp
;;(use-package good-scroll
;;  :ensure t)

;;(good-scroll-mode 1)

#+end_src

** Fixmee
#+begin_src emacs-lisp
(use-package fixmee
  :ensure t)
(use-package button-lock
  :ensure t)

(global-fixmee-mode 1)

#+end_src

* Configuration
** Temp files
	 #+begin_src emacs-lisp
		 (setq auto-save-file-name-transforms
					 `((".*" ,(concat user-emacs-directory "auto-save/") t)))
		 (setq backup-directory-alist
					 `(("." . ,(expand-file-name
											(concat user-emacs-directory "backups")))))
	 #+end_src
** Paren mode
	 #+begin_src emacs-lisp
		 (show-paren-mode 1)
	 #+end_src
** Right option key on macOS
	 #+begin_src emacs-lisp
		 (setq ns-alternate-modifier 'meta)
		 (setq ns-right-alternate-modifier 'none)

		 ;; Delete selected text on insert
		 (delete-selection-mode 1)
	 #+end_src

** Tab width
	 #+begin_src emacs-lisp
		 (setq-default tab-width 2)
		 (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
		 (setq indent-tabs-mode t)
	 #+end_src
** Visual line mode
	 #+begin_src emacs-lisp
		 (global-visual-line-mode t)
		 (setq-default word-wrap t)
	 #+end_src
** MacOS
	 #+begin_src emacs-lisp
		 (setq ns-alternate-modifier 'none)
		 (setq ns-right-alternate-modifier 'none)
		 (setq mac-command-modifier 'meta)
	 #+end_src

* Appearence
** UI elements:
	 #+begin_src emacs-lisp
		 ;; Remove Welcome message
		 (setq inhibit-startup-message t)

		 ;; ;; Hilight on current line
		 ;; (global-hl-line-mode t)

		 ;; Remove blinking cursor
		 (blink-cursor-mode 0)
		 ;; Remover tool bar
		 (tool-bar-mode -1)
		 ;; Remove menu bar
		 (menu-bar-mode -1)
		 ;; Remover barra de rolagem
		 (scroll-bar-mode -1)
		 ;; Show line number globally
		 (global-linum-mode t)

		 (setq visible-bell nil)

		 ;; Add doom modeline to the bottom
		 (use-package doom-modeline
			 :ensure t
			 :init (doom-modeline-mode 1)
			 :custom ((doom-modeline-height 15)))
	 #+end_src

	 #+RESULTS:

** Theme
	 #+begin_src emacs-lisp
		 ;; Setup doom-themes
		 ;; (use-package doom-themes
		 ;; 	:ensure t
		 ;; 	:config
		 ;; 	(setq doom-themes-enable-bold nil
		 ;; 				doom-themes-enable-italic nil)

		 ;; 	;;(load-theme 'doom-one t)
		 ;; 	(load-theme 'doom-dracula t)

		 ;; 	(doom-themes-visual-bell-config)
		 ;; 	(doom-themes-neotree-config)
		 ;; 	;;(setq doom-themes-treemacs-theme "doom-gruvbox")
		 ;; 	(setq doom-themes-treemacs-theme "doom-one")
		 ;; 	(doom-themes-treemacs-config)
		 ;; 	(doom-themes-org-config))
		 (use-package almost-mono-themes
			 :ensure t)
		 ;;(load-theme 'almost-mono-cream t)
     (use-package gruvbox-theme
		   :ensure t)
			 (use-package spacemacs-theme
			 :defer t
			 :init (load-theme 'spacemacs-dark t))
	 #+end_src

** Icons
	 #+begin_src emacs-lisp
		 (use-package all-the-icons
			 :ensure t
			 :if (display-graphic-p)
			 :commands all-the-icons-install-fonts
			 :init
			 (unless (find-font (font-spec :name "all-the-icons"))
				 (all-the-icons-install-fonts t)))

		 (use-package all-the-icons-dired
			 :ensure t
			 :if (display-graphic-p)
			 :hook (dired-mode . all-the-icons-dired-mode))
	 #+end_src

** Font
	 #+begin_src emacs-lisp
		 ;;(set-face-bold-p 'bold nil)

		 ;; (set-face-attribute 'default nil :font "Fixedsys Excelsior 3.01" :height 120 :weight 'normal :underline nil)
		 (set-face-attribute 'default nil :font "IBM Plex Mono" :height 120)
		 ;; (set-face-attribute 'default nil :font "Source Code Pro" :height 120)
		 ;;(set-face-attribute 'default nil :font "Cutive Mono" :height 120)

		 ;; Set the fixed pitch face
		 (set-face-attribute 'fixed-pitch nil :font "IBM Plex Mono" :height 120)

		 ;; Set the variable pitch face
		 (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120 :weight 'regular)
	 #+end_src

** Dashboard
	 #+begin_src emacs-lisp
		 (use-package dashboard
			 :ensure t
			 :config
			 (setq dashboard-set-heading-icons t)
			 (setq dashboard-set-file-icons t)
			 (setq dashboard-set-navigator t)
			 (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
			 (setq dashboard-startup-banner "~/.emacs.d/dashboard-logos/acdc.txt")
			 (setq dashboard-center-content t)
			 (setq dashboard-show-shortcuts t)
			 (setq dashboard-items '((recents  . 5)
															 (bookmarks . 5)
															 (projects . 5)
															 (agenda . 5)
															 (registers . 5)))	
			 (dashboard-setup-startup-hook))
	 #+end_src

** Tab bar
	 #+begin_src emacs-lisp
																						 ;	(use-package centaur-tabs
																						 ;		:demand
																						 ;		:config
																						 ;		(centaur-tabs-mode t)
																						 ;		:bind
																						 ;		("C-p" . centaur-tabs-backward)
																						 ;		("C-n" . centaur-tabs-forward))
																						 ;	(setq centaur-tabs-style "rounded")
																						 ;	(setq centaur-tabs-set-icons t)
																						 ;	(setq centaur-tabs-set-modified-marker t)
																						 ;	(setq centaur-tabs-modified-marker "*")
	 #+end_src

** Treemacs
	 #+begin_src emacs-lisp
		 (use-package treemacs
			 :ensure t
			 :defer t
			 :init
			 (with-eval-after-load 'winum
				 (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
			 :config
			 (progn
				 (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
							 treemacs-deferred-git-apply-delay        0.5
							 treemacs-directory-name-transformer      #'identity
							 treemacs-display-in-side-window          t
							 treemacs-eldoc-display                   t
							 treemacs-file-event-delay                5000
							 treemacs-file-extension-regex            treemacs-last-period-regex-value
							 treemacs-file-follow-delay               0.2
							 treemacs-file-name-transformer           #'identity
							 treemacs-follow-after-init               t
							 treemacs-expand-after-init               t
							 treemacs-git-command-pipe                ""
							 treemacs-goto-tag-strategy               'refetch-index
							 treemacs-indentation                     2
							 treemacs-indentation-string              " "
							 treemacs-is-never-other-window           nil
							 treemacs-max-git-entries                 5000
							 treemacs-missing-project-action          'ask
							 treemacs-move-forward-on-expand          nil
							 treemacs-no-png-images                   nil
							 treemacs-no-delete-other-windows         t
							 treemacs-project-follow-cleanup          nil
							 treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
							 treemacs-position                        'left
							 treemacs-read-string-input               'from-child-frame
							 treemacs-recenter-distance               0.1
							 treemacs-recenter-after-file-follow      nil
							 treemacs-recenter-after-tag-follow       nil
							 treemacs-recenter-after-project-jump     'always
							 treemacs-recenter-after-project-expand   'on-distance
							 treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
							 treemacs-show-cursor                     nil
							 treemacs-show-hidden-files               t
							 treemacs-silent-filewatch                nil
							 treemacs-silent-refresh                  nil
							 treemacs-sorting                         'alphabetic-asc
							 treemacs-select-when-already-in-treemacs 'move-back
							 treemacs-space-between-root-nodes        t
							 treemacs-tag-follow-cleanup              t
							 treemacs-tag-follow-delay                1.5
							 treemacs-user-mode-line-format           nil
							 treemacs-user-header-line-format         nil
							 treemacs-wide-toggle-width               70
							 treemacs-width                           25
							 treemacs-width-increment                 1
							 treemacs-width-is-initially-locked       nil
							 treemacs-workspace-switch-cleanup        nil)

				 ;; The default width and height of the icons is 22 pixels. If you are
				 ;; using a Hi-DPI display, uncomment this to double the icon size.
				 ;;(treemacs-resize-icons 44)

				 (treemacs-follow-mode t)
				 (treemacs-filewatch-mode t)
				 (treemacs-fringe-indicator-mode 'always)

				 (pcase (cons (not (null (executable-find "git")))
											(not (null treemacs-python-executable)))
					 (`(t . t)
						(treemacs-git-mode 'deferred))
					 (`(t . _)
						(treemacs-git-mode 'simple)))

				 (treemacs-hide-gitignored-files-mode nil))
			 :bind
			 (:map global-map
						 ("M-0"       . treemacs-select-window)
						 ("C-x t 1"   . treemacs-delete-other-windows)
						 ("C-x t t"   . treemacs)
						 ("C-x t B"   . treemacs-bookmark)
						 ("C-x t C-t" . treemacs-find-file)
						 ("C-x t M-t" . treemacs-find-tag)))

		 (with-eval-after-load 'treemacs
			 (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))

		 (use-package treemacs-evil
			 :after (treemacs evil)
			 :ensure t)

		 (use-package treemacs-projectile
			 :after (treemacs projectile)
			 :ensure t)

		 (use-package treemacs-icons-dired
			 :hook (dired-mode . treemacs-icons-dired-enable-once)
			 :ensure t)
	 #+end_src

** Special Words Highlights
	 #+begin_src emacs-lisp
		 (use-package hl-todo
			 :ensure t
			 :hook (prog-mode . hl-todo-mode)
			 :config
			 (setq hl-todo-highlight-punctuation ":"
						 hl-todo-keyword-faces
						 `(("TODO"       warning bold)
							 ("FIXME"      error bold)
							 ("HACK"       font-lock-constant-face bold)
							 ("REVIEW"     font-lock-keyword-face bold)
							 ("NOTE"       success bold)
							 ("DEPRECATED" font-lock-doc-face bold))))
	 #+end_src
* Org Mode
** Org Mode setup handler

	 #+begin_src emacs-lisp
		 (defun efs/org-mode-setup ()
																						 ;(org-indent-mode)
			 (variable-pitch-mode 1)
			 (visual-line-mode 1))
	 #+end_src

** Org Mode Font

	 #+begin_src emacs-lisp
		 (defun efs/org-font-setup ()
			 ;; Replace list hyphen with dot
			 (font-lock-add-keywords 'org-mode
															 '(("^ *\\([-]\\) "
																	(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

			 ;; Set faces for heading levels
			 (dolist (face '(
											 (org-level-1 . 1.2)
											 (org-level-2 . 1.1)
											 (org-level-3 . 1.05)
											 (org-level-4 . 1.0)
											 (org-level-5 . 1.1)
											 (org-level-6 . 1.1)
											 (org-level-7 . 1.1)
											 (org-level-8 . 1.1)))
				 (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

			 ;; Ensure that anything that should be fixed-pitch in Org files appears that way
			 (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
			 (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
			 (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
			 (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
	 #+end_src

** Org Package
	 #+begin_src emacs-lisp
		 (use-package org
			 :hook (org-mode . efs/org-mode-setup)
			 :config
			 ;; (setq org-ellipsis " ▾")
			 (setq org-agenda-start-with-log-mode t)
			 (setq org-log-done 'time)
			 (setq org-log-into-drawer t)

			 (setq org-agenda-files
						 '("~/workspace/orgfiles/tasks.org"))

			 (setq org-todo-keywords
						 '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
							 (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

			 (setq org-refile-targets
						 '(("tasks.org" :maxlevel . 1)))

			 ;; Save Org buffers after refiling!
			 (advice-add 'org-refile :after 'org-save-all-org-buffers)

			 (setq org-tag-alist
						 '((:startgroup)
																						 ; Put mutually exclusive tags here
							 (:endgroup)
							 ("@errand" . ?E)
							 ("@home" . ?H)
							 ("@work" . ?W)
							 ("agenda" . ?a)
							 ("planning" . ?p)
							 ("publish" . ?P)
							 ("batch" . ?b)
							 ("note" . ?n)
							 ("idea" . ?i)))

			 ;; Configure custom agenda views
			 (setq org-agenda-custom-commands
						 '(("d" "Dashboard"
								((agenda "" ((org-deadline-warning-days 7)))
								 (todo "NEXT"
											 ((org-agenda-overriding-header "Next Tasks")))
								 (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

							 ("n" "Next Tasks"
								((todo "NEXT"
											 ((org-agenda-overriding-header "Next Tasks")))))

							 ("W" "Work Tasks" tags-todo "+work-email")

							 ;; Low-effort next actions
							 ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
								((org-agenda-overriding-header "Low Effort Tasks")
								 (org-agenda-max-todos 20)
								 (org-agenda-files org-agenda-files)))

							 ("w" "Workflow Status"
								((todo "WAIT"
											 ((org-agenda-overriding-header "Waiting on External")
												(org-agenda-files org-agenda-files)))
								 (todo "REVIEW"
											 ((org-agenda-overriding-header "In Review")
												(org-agenda-files org-agenda-files)))
								 (todo "PLAN"
											 ((org-agenda-overriding-header "In Planning")
												(org-agenda-todo-list-sublevels nil)
												(org-agenda-files org-agenda-files)))
								 (todo "BACKLOG"
											 ((org-agenda-overriding-header "Project Backlog")
												(org-agenda-todo-list-sublevels nil)
												(org-agenda-files org-agenda-files)))
								 (todo "READY"
											 ((org-agenda-overriding-header "Ready for Work")
												(org-agenda-files org-agenda-files)))
								 (todo "ACTIVE"
											 ((org-agenda-overriding-header "Active Projects")
												(org-agenda-files org-agenda-files)))
								 (todo "COMPLETED"
											 ((org-agenda-overriding-header "Completed Projects")
												(org-agenda-files org-agenda-files)))
								 (todo "CANC"
											 ((org-agenda-overriding-header "Cancelled Projects")
												(org-agenda-files org-agenda-files)))))))

			 (efs/org-font-setup))
	 #+end_src

** Org Bullets

	 #+begin_src emacs-lisp
		 (use-package org-bullets
			 :after org
			 :hook (org-mode . org-bullets-mode)
			 :custom
			 (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
	 #+end_src

** Org Visual Fill Column

	 #+begin_src emacs-lisp
		 (defun efs/org-mode-visual-fill ()
			 (setq visual-fill-column-width 100
						 visual-fill-column-center-text t)
			 (visual-fill-column-mode 1))

		 (use-package visual-fill-column
			 :hook (org-mode . efs/org-mode-visual-fill))
	 #+end_src

** Org Configure Babel Languages
	 #+begin_src emacs-lisp
		 (org-babel-do-load-languages
			'org-babel-load-languages
			'((emacs-lisp . t)
				(python . t)))
	 #+end_src

** Org Auto-tangle Configuration files
	 #+begin_src emacs-lisp
		 ;; Automatically tangle our emacs.org config file when we save it
		 (defun efs/org-babel-tangle-config ()
			 (when (string-equal (buffer-file-name)
													 (expand-file-name "~/.emacs.d/emacs.org"))
				 ;; Dynamic scoping to the rescue
				 (let ((org-confirm-babel-evaluate nil))
					 (org-babel-tangle))))

		 (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
	 #+end_src

* Development
** Language server
	 #+begin_src emacs-lisp
(setq lsp-log-io nil) ;; Don't log everything = speed
(setq lsp-keymap-prefix "C-c l")
(setq lsp-restart 'auto-restart)
(setq lsp-ui-sideline-show-diagnostics t)
(setq lsp-ui-sideline-show-hover t)
(setq lsp-ui-sideline-show-code-actions t)

		 (use-package lsp-mode
			 :ensure t
			 :hook (
			 (web-mode . lsp-deferred)
			   (lsp-mode . (lambda ()
			   (let ((lsp-keymap-prexix "C-c l")))))
			 )
			 :config
			 (setq lsp-headerline-breadcrumb-enable nil)
			 (setq lsp-enable-links nil)
			 (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
			 :commands lsp lsp-deferred)

		 (use-package lsp-ui
			 :ensure t
			 :hook (lsp-mode . lsp-ui-mode)
			 :custom
			 (lsp-ui-doc-position 'bottom))

		 (use-package lsp-ivy
			 :ensure t)

	 #+end_src
** Flycheck
	 #+begin_src emacs-lisp
	 (use-package flycheck
	   :ensure t
	   :init
	   (global-flycheck-mode))
																						 ;		(setq flycheck-clang-language-standard "c++11"))
	 #+end_src

** C/C++
	 #+begin_src emacs-lisp
		 (add-hook 'c++-mode-hook 'lsp-deferred)
		 (add-hook 'c-mode-hook 'lsp-deferred)
		 (add-hook 'cuda-mode-hook 'lsp-deferred)
		 (add-hook 'objc-mode-hook 'lsp-deferred)
	 #+end_src

** CMake

	 #+begin_src emacs-lisp
		 (use-package cmake-mode
			 :ensure t
			 :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'")
			 :hook (cmake-mode . lsp-deferred))
	 #+end_src

** Typescript, Javascript, JSX, Node
	 #+begin_src emacs-lisp
		 (use-package json-mode
			 :ensure t)

		 (use-package rjsx-mode
			 :ensure t
			  :mode (("\\.js\\'" . rjsx-mode)
		  	("\\.jsx\\'" .  rjsx-mode)
		  	("\\.ts\\'" . rjsx-mode)
		  	("\\.tsx\\'" . rjsx-mode)
		 	  ("\\.html\\'" . rjsx-modee)))

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;; (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

(use-package tide
  :ensure t
	:after (rjsx-mode company flycheck)
	:hook (rjsx-mode . setup-tide-mode))

(use-package prettier-js
  :ensure t
	:after (rjsx-mode)
  :hook (rjsx-mode . prettier-js-mode))

#+end_src


* Terminal
	#+begin_src emacs-lisp

		(use-package vterm
			:commands vterm
			:config
			(setq term-prompt-regexp "^[^#$%>\n]*[#$%>| *")
			)

		(use-package term
			:config
			(setq explicit-shell-file-name "bash")
			(setq term-prompt-regexp "^[^#$%>\n]*[#$%>| *"))
	#+end_src
* Keybindings
	#+begin_src emacs-lisp
		(global-set-key (kbd "M-<tab>") 'other-window)

		(define-key evil-motion-state-map " " nil)

		(define-key evil-normal-state-map (kbd "C-r") 'replace-regexp)
		(define-key evil-normal-state-map (kbd "C-S-R") 'ag-project-regexp)

		;; Double spaces for finding files
		(define-key evil-normal-state-map (kbd "SPC SPC") 'helm-projectile-find-file)

		;; Quick buffer switching
		(define-key evil-normal-state-map (kbd "M-l") 'next-buffer)
		(define-key evil-normal-state-map (kbd "M-h") 'previous-buffer)
		(define-key term-mode-map (kbd "M-l") 'next-buffer)
		(define-key term-mode-map (kbd "M-h") 'previous-buffer)

		(define-key evil-normal-state-map (kbd "C-c c") 'uncomment-region)
		(define-key evil-insert-state-map (kbd "C-c u") 'uncomment-region)
		(define-key evil-normal-state-map (kbd "C-c c") 'comment-region)
		(define-key evil-insert-state-map (kbd "C-c u") 'comment-region)

		;; Move lines with M-j, M-k in normal and insert mode
		(define-key evil-normal-state-map (kbd "M-k") 'move-text-up)
		(define-key evil-normal-state-map (kbd "M-j") 'move-text-down)
		(define-key evil-insert-state-map (kbd "M-k") 'move-text-up)
		(define-key evil-insert-state-map (kbd "M-j") 'move-text-down)


		(define-key evil-normal-state-map (kbd "M-<up>") 'move-text-up)
		(define-key evil-normal-state-map (kbd "M-<down>") 'move-text-down)
		(define-key evil-insert-state-map (kbd "M-<up>") 'move-text-up)
		(define-key evil-insert-state-map (kbd "M-<down>") 'move-text-down)


		(define-key evil-insert-state-map (kbd "C-c h") 'evil-window-left)
		(define-key evil-insert-state-map (kbd "C-c j") 'evil-window-down)
		(define-key evil-insert-state-map (kbd "C-c k") 'evil-window-up)
		(define-key evil-insert-state-map (kbd "C-c l") 'evil-window-right)
		(define-key evil-normal-state-map (kbd "C-c h") 'evil-window-left)
		(define-key evil-normal-state-map (kbd "C-c j") 'evil-window-down)
		(define-key evil-normal-state-map (kbd "C-c k") 'evil-window-up)
		(define-key evil-normal-state-map (kbd "C-c l") 'evil-window-right)

		(define-key term-raw-map (kbd "C-c k") 'evil-window-up)
		(define-key term-raw-map (kbd "C-c j") 'evil-window-down)
		(define-key term-raw-map (kbd "C-c l") 'evil-window-right)
		(define-key term-raw-map (kbd "C-c h") 'evil-window-left)

		(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

		(define-key evil-insert-state-map (kbd "M-b") 'helm-buffers-list)
		(define-key evil-normal-state-map (kbd "M-b") 'helm-buffers-list)

		(define-key evil-normal-state-map (kbd "t") 'term)

		(eval-after-load "shell"
			'(define-key shell-mode-map (kbd "TAB") #'company-complete))
		(add-hook 'shell-mode-hook #'company-mode)



		(defvar my-double-key-timeout 0.25
			"The number of seconds to wait for a second key press.")
		(defun my-tab ()
			"Move to the beginning of the current line on the first key stroke,
		and to the beginning of the buffer if there is a second key stroke
		within `my-double-key-timeout' seconds."
			(interactive)
			(let ((last-called (get this-command 'my-last-call-time)) )
				(is-term (string= "term-mode" major-mode)))
			(if (and is-term (term-in-char-mode))
					(term-send-raw-string "\t")
				(if (and (eq last-command this-command)
								 last-called
								 (<= time-to-seconds (time-since last-called) my-double-key-timeout))
						(yas-expand) 

					(if (sit-for my-double-key-timeout)
							(complete-indent-fold)))

				(put this-command 'my-last-call-time (current-time))))

		(defun complete-indent-fold()
			(interactive)
			(if (looking-at outline-regexp)
					(if (equal major-mode 'org-mode) (org-cycle) (my-outline-cycle))
				(if (looking-at "\\_>") (company-complete) (indent-for-tab-command))))

		(define-key term-mode-map (kbd "TAB") 'my-tab)

	#+end_src
